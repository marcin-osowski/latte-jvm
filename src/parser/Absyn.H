#ifndef LATTE_PARSER_ABSYN_HEADER
#define LATTE_PARSER_ABSYN_HEADER

#include<string>
#include<vector>
#include "../exceptions.h"

//C++ Abstract Syntax Interface generated by the BNF Converter.
namespace latte_parser
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Program;
class TopDef;
class Arg;
class Block;
class Stmt;
class Item;
class Type;
class Expr;
class AddOp;
class MulOp;
class RelOp;
class PProg;
class TFnDef;
class AArg;
class BBlock;
class SEmpty;
class SBStmt;
class SDecl;
class INoInit;
class IInit;
class SAss;
class SIncr;
class SDecr;
class SRet;
class SVRet;
class SCond;
class SCondElse;
class SWhile;
class SSExp;
class TInt;
class TStr;
class TBool;
class TVoid;
class EVar;
class ELitInt;
class ELitTrue;
class ELitFalse;
class EApp;
class EString;
class ENeg;
class ENot;
class EMul;
class EAdd;
class ERel;
class EAnd;
class EOr;
class OPlus;
class OMinus;
class OTimes;
class ODiv;
class OMod;
class OLTH;
class OLE;
class OGTH;
class OGE;
class OEQU;
class ONE;
class ListTopDef;
class ListArg;
class ListStmt;
class ListItem;
class ListExpr;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p){ throw NotImplementedException(); }
  virtual void visitTopDef(TopDef *p){ throw NotImplementedException(); }
  virtual void visitArg(Arg *p){ throw NotImplementedException(); }
  virtual void visitBlock(Block *p){ throw NotImplementedException(); }
  virtual void visitStmt(Stmt *p){ throw NotImplementedException(); }
  virtual void visitItem(Item *p){ throw NotImplementedException(); }
  virtual void visitType(Type *p){ throw NotImplementedException(); }
  virtual void visitExpr(Expr *p){ throw NotImplementedException(); }
  virtual void visitAddOp(AddOp *p){ throw NotImplementedException(); }
  virtual void visitMulOp(MulOp *p){ throw NotImplementedException(); }
  virtual void visitRelOp(RelOp *p){ throw NotImplementedException(); }
  virtual void visitPProg(PProg *p) = 0;
  virtual void visitTFnDef(TFnDef *p){ throw NotImplementedException(); }
  virtual void visitAArg(AArg *p){ throw NotImplementedException(); }
  virtual void visitBBlock(BBlock *p){ throw NotImplementedException(); }
  virtual void visitSEmpty(SEmpty *p){ throw NotImplementedException(); }
  virtual void visitSBStmt(SBStmt *p){ throw NotImplementedException(); }
  virtual void visitSDecl(SDecl *p){ throw NotImplementedException(); }
  virtual void visitINoInit(INoInit *p){ throw NotImplementedException(); }
  virtual void visitIInit(IInit *p){ throw NotImplementedException(); }
  virtual void visitSAss(SAss *p){ throw NotImplementedException(); }
  virtual void visitSIncr(SIncr *p){ throw NotImplementedException(); }
  virtual void visitSDecr(SDecr *p){ throw NotImplementedException(); }
  virtual void visitSRet(SRet *p){ throw NotImplementedException(); }
  virtual void visitSVRet(SVRet *p){ throw NotImplementedException(); }
  virtual void visitSCond(SCond *p){ throw NotImplementedException(); }
  virtual void visitSCondElse(SCondElse *p){ throw NotImplementedException(); }
  virtual void visitSWhile(SWhile *p){ throw NotImplementedException(); }
  virtual void visitSSExp(SSExp *p){ throw NotImplementedException(); }
  virtual void visitTInt(TInt *p){ throw NotImplementedException(); }
  virtual void visitTStr(TStr *p){ throw NotImplementedException(); }
  virtual void visitTBool(TBool *p){ throw NotImplementedException(); }
  virtual void visitTVoid(TVoid *p){ throw NotImplementedException(); }
  virtual void visitEVar(EVar *p){ throw NotImplementedException(); }
  virtual void visitELitInt(ELitInt *p){ throw NotImplementedException(); }
  virtual void visitELitTrue(ELitTrue *p){ throw NotImplementedException(); }
  virtual void visitELitFalse(ELitFalse *p){ throw NotImplementedException(); }
  virtual void visitEApp(EApp *p){ throw NotImplementedException(); }
  virtual void visitEString(EString *p){ throw NotImplementedException(); }
  virtual void visitENeg(ENeg *p){ throw NotImplementedException(); }
  virtual void visitENot(ENot *p){ throw NotImplementedException(); }
  virtual void visitEMul(EMul *p){ throw NotImplementedException(); }
  virtual void visitEAdd(EAdd *p){ throw NotImplementedException(); }
  virtual void visitERel(ERel *p){ throw NotImplementedException(); }
  virtual void visitEAnd(EAnd *p){ throw NotImplementedException(); }
  virtual void visitEOr(EOr *p){ throw NotImplementedException(); }
  virtual void visitOPlus(OPlus *p){ throw NotImplementedException(); }
  virtual void visitOMinus(OMinus *p){ throw NotImplementedException(); }
  virtual void visitOTimes(OTimes *p){ throw NotImplementedException(); }
  virtual void visitODiv(ODiv *p){ throw NotImplementedException(); }
  virtual void visitOMod(OMod *p){ throw NotImplementedException(); }
  virtual void visitOLTH(OLTH *p){ throw NotImplementedException(); }
  virtual void visitOLE(OLE *p){ throw NotImplementedException(); }
  virtual void visitOGTH(OGTH *p){ throw NotImplementedException(); }
  virtual void visitOGE(OGE *p){ throw NotImplementedException(); }
  virtual void visitOEQU(OEQU *p){ throw NotImplementedException(); }
  virtual void visitONE(ONE *p){ throw NotImplementedException(); }
  virtual void visitListTopDef(ListTopDef *p){ throw NotImplementedException(); }
  virtual void visitListArg(ListArg *p){ throw NotImplementedException(); }
  virtual void visitListStmt(ListStmt *p){ throw NotImplementedException(); }
  virtual void visitListItem(ListItem *p){ throw NotImplementedException(); }
  virtual void visitListExpr(ListExpr *p){ throw NotImplementedException(); }


  virtual void visitInteger(Integer x){ throw NotImplementedException(); }
  virtual void visitChar(Char x){ throw NotImplementedException(); }
  virtual void visitDouble(Double x){ throw NotImplementedException(); }
  virtual void visitString(String x){ throw NotImplementedException(); }
  virtual void visitIdent(Ident x){ throw NotImplementedException(); }

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;
  int line_number;
};

class TopDef : public Visitable
{
public:
  virtual TopDef *clone() const = 0;
  int line_number;
};

class Arg : public Visitable
{
public:
  virtual Arg *clone() const = 0;
  int line_number;
};

class Block : public Visitable
{
public:
  virtual Block *clone() const = 0;
  int line_number;
};

class Stmt : public Visitable
{
public:
  virtual Stmt *clone() const = 0;
  int line_number;
};

class Item : public Visitable
{
public:
  virtual Item *clone() const = 0;
  int line_number;
};

class Type : public Visitable
{
public:
  virtual Type *clone() const = 0;
  int line_number;
};

class Expr : public Visitable
{
public:
  virtual Expr *clone() const = 0;
  int line_number;
};

class AddOp : public Visitable
{
public:
  virtual AddOp *clone() const = 0;
  int line_number;
};

class MulOp : public Visitable
{
public:
  virtual MulOp *clone() const = 0;
  int line_number;
};

class RelOp : public Visitable
{
public:
  virtual RelOp *clone() const = 0;
  int line_number;
};



class PProg : public Program
{
public:
  ListTopDef *listtopdef_;

  PProg(const PProg &);
  PProg &operator=(const PProg &);
  PProg(ListTopDef *p1);
  ~PProg();
  virtual void accept(Visitor *v);
  virtual PProg *clone() const;
  void swap(PProg &);
};

class TFnDef : public TopDef
{
public:
  Type *type_;
  Ident ident_;
  ListArg *listarg_;
  Block *block_;

  TFnDef(const TFnDef &);
  TFnDef &operator=(const TFnDef &);
  TFnDef(Type *p1, Ident p2, ListArg *p3, Block *p4);
  ~TFnDef();
  virtual void accept(Visitor *v);
  virtual TFnDef *clone() const;
  void swap(TFnDef &);
};

class AArg : public Arg
{
public:
  Type *type_;
  Ident ident_;

  AArg(const AArg &);
  AArg &operator=(const AArg &);
  AArg(Type *p1, Ident p2);
  ~AArg();
  virtual void accept(Visitor *v);
  virtual AArg *clone() const;
  void swap(AArg &);
};

class BBlock : public Block
{
public:
  ListStmt *liststmt_;

  BBlock(const BBlock &);
  BBlock &operator=(const BBlock &);
  BBlock(ListStmt *p1);
  ~BBlock();
  virtual void accept(Visitor *v);
  virtual BBlock *clone() const;
  void swap(BBlock &);
};

class SEmpty : public Stmt
{
public:

  SEmpty(const SEmpty &);
  SEmpty &operator=(const SEmpty &);
  SEmpty();
  ~SEmpty();
  virtual void accept(Visitor *v);
  virtual SEmpty *clone() const;
  void swap(SEmpty &);
};

class SBStmt : public Stmt
{
public:
  Block *block_;

  SBStmt(const SBStmt &);
  SBStmt &operator=(const SBStmt &);
  SBStmt(Block *p1);
  ~SBStmt();
  virtual void accept(Visitor *v);
  virtual SBStmt *clone() const;
  void swap(SBStmt &);
};

class SDecl : public Stmt
{
public:
  Type *type_;
  ListItem *listitem_;

  SDecl(const SDecl &);
  SDecl &operator=(const SDecl &);
  SDecl(Type *p1, ListItem *p2);
  ~SDecl();
  virtual void accept(Visitor *v);
  virtual SDecl *clone() const;
  void swap(SDecl &);
};

class SAss : public Stmt
{
public:
  Ident ident_;
  Expr *expr_;

  SAss(const SAss &);
  SAss &operator=(const SAss &);
  SAss(Ident p1, Expr *p2);
  ~SAss();
  virtual void accept(Visitor *v);
  virtual SAss *clone() const;
  void swap(SAss &);
};

class SIncr : public Stmt
{
public:
  Ident ident_;

  SIncr(const SIncr &);
  SIncr &operator=(const SIncr &);
  SIncr(Ident p1);
  ~SIncr();
  virtual void accept(Visitor *v);
  virtual SIncr *clone() const;
  void swap(SIncr &);
};

class SDecr : public Stmt
{
public:
  Ident ident_;

  SDecr(const SDecr &);
  SDecr &operator=(const SDecr &);
  SDecr(Ident p1);
  ~SDecr();
  virtual void accept(Visitor *v);
  virtual SDecr *clone() const;
  void swap(SDecr &);
};

class SRet : public Stmt
{
public:
  Expr *expr_;

  SRet(const SRet &);
  SRet &operator=(const SRet &);
  SRet(Expr *p1);
  ~SRet();
  virtual void accept(Visitor *v);
  virtual SRet *clone() const;
  void swap(SRet &);
};

class SVRet : public Stmt
{
public:

  SVRet(const SVRet &);
  SVRet &operator=(const SVRet &);
  SVRet();
  ~SVRet();
  virtual void accept(Visitor *v);
  virtual SVRet *clone() const;
  void swap(SVRet &);
};

class SCond : public Stmt
{
public:
  Expr *expr_;
  Stmt *stmt_;

  SCond(const SCond &);
  SCond &operator=(const SCond &);
  SCond(Expr *p1, Stmt *p2);
  ~SCond();
  virtual void accept(Visitor *v);
  virtual SCond *clone() const;
  void swap(SCond &);
};

class SCondElse : public Stmt
{
public:
  Expr *expr_;
  Stmt *stmt_1;
  Stmt *stmt_2;

  SCondElse(const SCondElse &);
  SCondElse &operator=(const SCondElse &);
  SCondElse(Expr *p1, Stmt *p2, Stmt *p3);
  ~SCondElse();
  virtual void accept(Visitor *v);
  virtual SCondElse *clone() const;
  void swap(SCondElse &);
};

class SWhile : public Stmt
{
public:
  Expr *expr_;
  Stmt *stmt_;

  SWhile(const SWhile &);
  SWhile &operator=(const SWhile &);
  SWhile(Expr *p1, Stmt *p2);
  ~SWhile();
  virtual void accept(Visitor *v);
  virtual SWhile *clone() const;
  void swap(SWhile &);
};

class SSExp : public Stmt
{
public:
  Expr *expr_;

  SSExp(const SSExp &);
  SSExp &operator=(const SSExp &);
  SSExp(Expr *p1);
  ~SSExp();
  virtual void accept(Visitor *v);
  virtual SSExp *clone() const;
  void swap(SSExp &);
};

class INoInit : public Item
{
public:
  Ident ident_;

  INoInit(const INoInit &);
  INoInit &operator=(const INoInit &);
  INoInit(Ident p1);
  ~INoInit();
  virtual void accept(Visitor *v);
  virtual INoInit *clone() const;
  void swap(INoInit &);
};

class IInit : public Item
{
public:
  Ident ident_;
  Expr *expr_;

  IInit(const IInit &);
  IInit &operator=(const IInit &);
  IInit(Ident p1, Expr *p2);
  ~IInit();
  virtual void accept(Visitor *v);
  virtual IInit *clone() const;
  void swap(IInit &);
};

class TInt : public Type
{
public:

  TInt(const TInt &);
  TInt &operator=(const TInt &);
  TInt();
  ~TInt();
  virtual void accept(Visitor *v);
  virtual TInt *clone() const;
  void swap(TInt &);
};

class TStr : public Type
{
public:

  TStr(const TStr &);
  TStr &operator=(const TStr &);
  TStr();
  ~TStr();
  virtual void accept(Visitor *v);
  virtual TStr *clone() const;
  void swap(TStr &);
};

class TBool : public Type
{
public:

  TBool(const TBool &);
  TBool &operator=(const TBool &);
  TBool();
  ~TBool();
  virtual void accept(Visitor *v);
  virtual TBool *clone() const;
  void swap(TBool &);
};

class TVoid : public Type
{
public:

  TVoid(const TVoid &);
  TVoid &operator=(const TVoid &);
  TVoid();
  ~TVoid();
  virtual void accept(Visitor *v);
  virtual TVoid *clone() const;
  void swap(TVoid &);
};

class EVar : public Expr
{
public:
  Ident ident_;

  EVar(const EVar &);
  EVar &operator=(const EVar &);
  EVar(Ident p1);
  ~EVar();
  virtual void accept(Visitor *v);
  virtual EVar *clone() const;
  void swap(EVar &);
};

class ELitInt : public Expr
{
public:
  Integer integer_;

  ELitInt(const ELitInt &);
  ELitInt &operator=(const ELitInt &);
  ELitInt(Integer p1);
  ~ELitInt();
  virtual void accept(Visitor *v);
  virtual ELitInt *clone() const;
  void swap(ELitInt &);
};

class ELitTrue : public Expr
{
public:

  ELitTrue(const ELitTrue &);
  ELitTrue &operator=(const ELitTrue &);
  ELitTrue();
  ~ELitTrue();
  virtual void accept(Visitor *v);
  virtual ELitTrue *clone() const;
  void swap(ELitTrue &);
};

class ELitFalse : public Expr
{
public:

  ELitFalse(const ELitFalse &);
  ELitFalse &operator=(const ELitFalse &);
  ELitFalse();
  ~ELitFalse();
  virtual void accept(Visitor *v);
  virtual ELitFalse *clone() const;
  void swap(ELitFalse &);
};

class EApp : public Expr
{
public:
  Ident ident_;
  ListExpr *listexpr_;

  EApp(const EApp &);
  EApp &operator=(const EApp &);
  EApp(Ident p1, ListExpr *p2);
  ~EApp();
  virtual void accept(Visitor *v);
  virtual EApp *clone() const;
  void swap(EApp &);
};

class EString : public Expr
{
public:
  String string_;

  EString(const EString &);
  EString &operator=(const EString &);
  EString(String p1);
  ~EString();
  virtual void accept(Visitor *v);
  virtual EString *clone() const;
  void swap(EString &);
};

class ENeg : public Expr
{
public:
  Expr *expr_;

  ENeg(const ENeg &);
  ENeg &operator=(const ENeg &);
  ENeg(Expr *p1);
  ~ENeg();
  virtual void accept(Visitor *v);
  virtual ENeg *clone() const;
  void swap(ENeg &);
};

class ENot : public Expr
{
public:
  Expr *expr_;

  ENot(const ENot &);
  ENot &operator=(const ENot &);
  ENot(Expr *p1);
  ~ENot();
  virtual void accept(Visitor *v);
  virtual ENot *clone() const;
  void swap(ENot &);
};

class EMul : public Expr
{
public:
  Expr *expr_1;
  MulOp *mulop_;
  Expr *expr_2;

  EMul(const EMul &);
  EMul &operator=(const EMul &);
  EMul(Expr *p1, MulOp *p2, Expr *p3);
  ~EMul();
  virtual void accept(Visitor *v);
  virtual EMul *clone() const;
  void swap(EMul &);
};

class EAdd : public Expr
{
public:
  Expr *expr_1;
  AddOp *addop_;
  Expr *expr_2;

  EAdd(const EAdd &);
  EAdd &operator=(const EAdd &);
  EAdd(Expr *p1, AddOp *p2, Expr *p3);
  ~EAdd();
  virtual void accept(Visitor *v);
  virtual EAdd *clone() const;
  void swap(EAdd &);
};

class ERel : public Expr
{
public:
  Expr *expr_1;
  RelOp *relop_;
  Expr *expr_2;

  ERel(const ERel &);
  ERel &operator=(const ERel &);
  ERel(Expr *p1, RelOp *p2, Expr *p3);
  ~ERel();
  virtual void accept(Visitor *v);
  virtual ERel *clone() const;
  void swap(ERel &);
};

class EAnd : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EAnd(const EAnd &);
  EAnd &operator=(const EAnd &);
  EAnd(Expr *p1, Expr *p2);
  ~EAnd();
  virtual void accept(Visitor *v);
  virtual EAnd *clone() const;
  void swap(EAnd &);
};

class EOr : public Expr
{
public:
  Expr *expr_1;
  Expr *expr_2;

  EOr(const EOr &);
  EOr &operator=(const EOr &);
  EOr(Expr *p1, Expr *p2);
  ~EOr();
  virtual void accept(Visitor *v);
  virtual EOr *clone() const;
  void swap(EOr &);
};

class OPlus : public AddOp
{
public:

  OPlus(const OPlus &);
  OPlus &operator=(const OPlus &);
  OPlus();
  ~OPlus();
  virtual void accept(Visitor *v);
  virtual OPlus *clone() const;
  void swap(OPlus &);
};

class OMinus : public AddOp
{
public:

  OMinus(const OMinus &);
  OMinus &operator=(const OMinus &);
  OMinus();
  ~OMinus();
  virtual void accept(Visitor *v);
  virtual OMinus *clone() const;
  void swap(OMinus &);
};

class OTimes : public MulOp
{
public:

  OTimes(const OTimes &);
  OTimes &operator=(const OTimes &);
  OTimes();
  ~OTimes();
  virtual void accept(Visitor *v);
  virtual OTimes *clone() const;
  void swap(OTimes &);
};

class ODiv : public MulOp
{
public:

  ODiv(const ODiv &);
  ODiv &operator=(const ODiv &);
  ODiv();
  ~ODiv();
  virtual void accept(Visitor *v);
  virtual ODiv *clone() const;
  void swap(ODiv &);
};

class OMod : public MulOp
{
public:

  OMod(const OMod &);
  OMod &operator=(const OMod &);
  OMod();
  ~OMod();
  virtual void accept(Visitor *v);
  virtual OMod *clone() const;
  void swap(OMod &);
};

class OLTH : public RelOp
{
public:

  OLTH(const OLTH &);
  OLTH &operator=(const OLTH &);
  OLTH();
  ~OLTH();
  virtual void accept(Visitor *v);
  virtual OLTH *clone() const;
  void swap(OLTH &);
};

class OLE : public RelOp
{
public:

  OLE(const OLE &);
  OLE &operator=(const OLE &);
  OLE();
  ~OLE();
  virtual void accept(Visitor *v);
  virtual OLE *clone() const;
  void swap(OLE &);
};

class OGTH : public RelOp
{
public:

  OGTH(const OGTH &);
  OGTH &operator=(const OGTH &);
  OGTH();
  ~OGTH();
  virtual void accept(Visitor *v);
  virtual OGTH *clone() const;
  void swap(OGTH &);
};

class OGE : public RelOp
{
public:

  OGE(const OGE &);
  OGE &operator=(const OGE &);
  OGE();
  ~OGE();
  virtual void accept(Visitor *v);
  virtual OGE *clone() const;
  void swap(OGE &);
};

class OEQU : public RelOp
{
public:

  OEQU(const OEQU &);
  OEQU &operator=(const OEQU &);
  OEQU();
  ~OEQU();
  virtual void accept(Visitor *v);
  virtual OEQU *clone() const;
  void swap(OEQU &);
};

class ONE : public RelOp
{
public:

  ONE(const ONE &);
  ONE &operator=(const ONE &);
  ONE();
  ~ONE();
  virtual void accept(Visitor *v);
  virtual ONE *clone() const;
  void swap(ONE &);
};



class ListTopDef : public Visitable, public std::vector<TopDef*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListTopDef *clone() const;
};

class ListArg : public Visitable, public std::vector<Arg*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListArg *clone() const;
};

class ListStmt : public Visitable, public std::vector<Stmt*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStmt *clone() const;
};

class ListItem : public Visitable, public std::vector<Item*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListItem *clone() const;
};

class ListExpr : public Visitable, public std::vector<Expr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExpr *clone() const;
};


}
#endif
